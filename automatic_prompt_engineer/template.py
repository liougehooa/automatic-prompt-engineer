class DemosTemplate:
    """
    Takes a template for the full demo and provides methods for filling in blanks.
    Eg, the format is as follows:
    [INPUT], [OUTPUT]
    """
    
    def __init__(self, demo_template, delimiter='\n\n'):
        self.demo_template = demo_template
        self.delimiter = delimiter
        
    def fill_demos(self, data):
        """
        Fills in the template with the given values. Data is a tuple of lists.
        """
        demos = []
        for input_, output_ in zip(*data):
            demo = self.demo_template.replace('[INPUT]', input_).replace('[OUTPUT]', output_)
            demos.append(demo)

        return self.delimiter.join(demos)
    

class GenerationTemplate:
    """
    Takes a prompt template and provides methods for filling in blanks.
    The format is as follows:
    [APE] is where text will be generated by the LLM.
    [full_DEMO] is where the full demo will be inserted.
    [INPUT] is where the input to the first demo will be inserted.
    [OUTPUT] is where the output from the first demo will be inserted.
    """

    def __init__(self, system_prompt, user_template, demo_template):
        self.system_prompt = system_prompt
        self.user_template = user_template
        self.demos_template = DemosTemplate(demo_template)

    def fill(self, task, data=[]):
        """
        Fills in the template with the given values.
        """
        demos = self.demos_template.fill_demos(data)
        user_msg = self.user_template.replace('[TASK_DESC]', task).replace('[DEMOS]', demos)
        messages=[
          {"role": "system", "content": self.system_prompt},
          {"role": "user", "content":  user_msg}
        ]
        
        return messages


class EvalTemplate:
    """
    Takes a prompt template and provides methods for filling in blanks.
    The format is as follows:
    [PROMPT] is where the prompt will be inserted.
    [full_DEMO] is where the full demo will be inserted.
    [INPUT] is where the input to the first demo will be inserted.
    [OUTPUT] is where the output from the first demo will be inserted.
    """

    def __init__(self, ranking_system_prompt, user_template):
        self.ranking_system_prompt = ranking_system_prompt
        self.user_template = user_template

    def fill_score_messages(self, task, input_, gen_a, gen_b):
        """
        Fills in the template with the given values.
        """
        user_content = self.user_template.replace('[TASK]', task).replace('[INPUT]', input_).replace('[GENERATION_A]', gen_a).replace('[GENERATION_B]', gen_b)
        return [
            {"role": "system", "content": self.ranking_system_prompt},
            {"role": "user", "content": user_content}
        ]

    def fill_generate_messages(self, prompt, input_):
        """
        Converts the evaluation template to a generation template.
        """
        return [
            {"role": "system", "content": prompt},
            {"role": "user", "content": input_}
        ]
